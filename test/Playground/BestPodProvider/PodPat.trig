prefix me:         <https://pat.best-pod-provider.com/profile/card#me>
prefix my-profile: <https://pat.example.com/profile/card>
prefix my-storage: <https://pat.best-pod-provider.com/storage/>
prefix my-storage-ACP: <https://pat.best-pod-provider.com/storage/?meta=ACP>


prefix webIdAlice: <https://alice-provider.com/profile/card#me>
prefix webIdBob:   <https://bob-provider.com/profile/card#me>
prefix webIdCarol: <https://carol-provider.com/profile/card#me>
prefix webIdDee:   <https://dee-provider.com/profile/card#me>
prefix webIdErik:  <https://erik-provider.com/profile/card#me>
prefix webIdFiona: <https://fiona-provider.com/profile/card#me>
prefix webIdGreg:  <https://greg-provider.com/profile/card#me>
prefix webIdHarry:  <https://harry-provider.com/profile/card#me>
prefix webIdIvanna: <https://ivanna-provider.com/profile/card#me>

prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd:        <http://www.w3.org/2001/XMLSchema#>
prefix foaf:       <http://xmlns.com/foaf/0.1/>
prefix vcard:      <http://www.w3.org/2006/vcard/ns#>
prefix ws:         <http://www.w3.org/ns/pim/space#>
prefix ldp:        <http://www.w3.org/ns/ldp#>
prefix dbpedia:    <http://dbpedia.org/resource/>
prefix httph:      <http://www.w3.org/2007/ont/httph#>
prefix schema:     <http://schema.org/>
prefix odrl:       <http://www.w3.org/ns/odrl/2/>
prefix dpv:        <http://www.w3.org/ns/dpv#>
prefix gconsent:   <https://w3id.org/GConsent#>

prefix solid:      <http://www.w3.org/ns/solid/terms#>
prefix solid-ext:  <http://www.w3.org/ns/solid/terms/experimental-or-extension#>
prefix acp:        <http://www.w3.org/ns/solid/acp#>

prefix ex:         <https://example.com#>

# Just made up this visualization vocab to allow us easily size nodes in GraphDB visualizations!
prefix viz:        <https://viz.example.com#>

#
# Create a Named Graph for this entire Pod.
# Inside here we actually define the Agent, and their Profile document.
#
my-storage: {
  #
  # Describe the Agent using it's WebID as the RDF Subject (e.g., often 'me', as a human being).
  # Points to the Agent's Solid Pod (i.e., back to this Named Graph!).
  #
  me: a schema:Person, foaf:Person ;
    rdfs:label "PatMcB"@en ;
    rdfs:comment "Pat is a human 'agent' from Dublin, and has a Solid Pod!"@en ;
    vcard:fn "Pat McB"@en, "Padraig MacB"@ga ;
    schema:name "Pat McB"@en, "Padraig MacB"@ga ;
    foaf:name "Pat McB"@en, "Padraig MacB"@ga ;
  # solid:account my-storage: ; # NSS might do it, but we have no need for 2 references to storage!
    solid:oidcIssuer  <https://broker.pod.inrupt.com/> ;
    ws:storage my-storage: ;
    solid:account  my-storage: ;    # Or is this really the root, i.e., just up to the domain?
    viz:nodeSize 0.85 .

  #
  # Describe my profile card - links back to the Agent's WebID, e.g., 'me', as a human being.
  #
  my-profile: a foaf:PersonalProfileDocument ;
    rdfs:label "Profile document"@en ;
    rdfs:comment "Personal profile document that points to it's 'maker' and 'primary topic'."@en ;
    foaf:maker me: ;
    foaf:primaryTopic me: ;
    schema:dateCreated "2009/01/01" ;
    solid:podProvider "Inrupt, Inc. (made up predicate - just for illustration)" ;
    viz:nodeSize 0.55 .

  #
  # Describe this Pod instance (is this allowed to add meta-data for the Named Graph itself?!)
  #
  my-storage: a ws:Storage ;
    rdfs:label "Solid Pod"@en ;
    rdfs:comment "A Solid Pod hosted by Inrupt's ESS product."@en ;
    solid-ext:hasServiceManager my-storage:Service-Manager ;
    viz:nodeSize 0.45 .

  #
  # My bikes...
  #
  my-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "500km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .

  my-storage:Bike-Felt-Commuter a ex:Bicycle ;
    schema:mileageFromOdometer "63,000km" ;
    schema:purchaseDate "2014/01/01" .


  #
  # My pets...
  #
  my-storage:Pet-Dog-Bobby a ex:Dog ;
    schema:label "Bobby"@en, "Bobik"@sk ;
    schema:comment "Bobby the wonder dog!"@en ;
    ex:breed "Jack Russel"@en .

  #
  # My properties...
  #
  my-storage:House-Phibsboro a schema:House ;
    rdfs:comment "Lovely end-of-terrace Victorian redbrick overlooking pitch-and-putt coarse."@en ;
    schema:numberOfRooms "8"^^xsd:integer ;
    schema:address "Phibsboro, Dublin 7"@en .


  #
  # My Service Manager.
  #
  my-storage:Service-Manager a solid-ext:ServiceManager ;
    rdfs:comment "Service manager (e.g., for managing my views, transactions, access control, contacts, etc.)."@en ;
    ldp:contains
      my-storage:Service-Notification ,
      my-storage:Service-Consent ,
      my-storage:Service-Owning ,
      my-storage:Service-View ,
      my-storage:Service-Txn .


  #
  # My Notification service...
  #
  my-storage:Service-Notification a solid-ext:Service ;
    rdfs:comment "Service handling notifications."@en .

  #
  # My Consent service...
  #
  my-storage:Service-Consent a solid-ext:Service ;
    rdfs:comment "Service handling Consent (granting, revoking, receipts, etc.)."@en .


  #
  # My Owning service...
  #
  my-storage:Service-Owning a solid-ext:Service ;
    rdfs:comment "Service to manage things I 'own'."@en ;
    ldp:contains
      my-storage:Bike-Cannondale-EVO ,
      my-storage:Bike-Felt-Commuter ,
      my-storage:Pet-Dog ,
      my-storage:House-Phibsboro .


  #
  # My Transaction service...
  #
  my-storage:Service-Txn a solid-ext:Service ;
    rdfs:comment "Service to manage transactions in a Pod, e.g., credit card purchases, house purchases, etc."@en ;
    ldp:contains
      my-storage:Txn-CreditCard-1 ,
      my-storage:Txn-DebitCard-1 ,
      my-storage:Txn-CreditCard-2 ,
      my-storage:Txn-CreditCard-3 .

  my-storage:Txn-CreditCard-1 a schema:BuyAction ;
    rdfs:comment "Purchased groceries at local market."@en .
  my-storage:Txn-DebitCard-1 a schema:BuyAction ;
    rdfs:comment "Bought shoes for kids."@en .
  my-storage:Txn-CreditCard-2 a schema:BuyAction ;
    rdfs:comment "Booked holiday with Ryanair."@en .
  my-storage:Txn-CreditCard-3 a schema:BuyAction ;
    rdfs:comment "Paid electricity bill."@en .


  #
  # My blog...
  #
  my-storage:Blog a schema:Blog, solid-ext:Resource;
    rdfs:label "My Blog"@en ;
    ldp:contains
      my-storage:Blog-Entry-1 ,
      my-storage:Blog-Entry-2 .

  #
  # A single blog entry - but it's a 'complex' entity, with a 'structure' made up of a 'Header' and
  # 'Footer' and attachments, etc.
  #
  my-storage:Blog-Entry-1 a schema:BlogPosting ;
    schema:title "How to Cook for Forty Humans"@en ;
    schema:articleBody "Lisa Simpson - 'Truly there were monsters on that ship, and truly we were them.'"@en ;
    schema:messageAttachment <https://simpsonswiki.com/wiki/How_to_Cook_for_Forty_Humans> ;
    schema:hasPart my-storage:Blog-Entry-1-Structure .
  my-storage:Blog-Entry-1-Structure
    schema:hasPart my-storage:Blog-Entry-1-Structure-Header ;
    schema:hasPart my-storage:Blog-Entry-1-Structure-Footer .
  my-storage:Blog-Entry-1-Structure-Header rdfs:comment "Arbitrary header contents..."@en .
  my-storage:Blog-Entry-1-Structure-Footer
    rdfs:comment "My footer actually has a bike as part of it..."@en ;
    schema:hasPart my-storage:Bike-Cannondale-EVO .
  # Loops are totally fine, SPARQL property paths will not infinitely recurse!
  #    schema:hasPart my-storage:Blog-Entry-1 ;
  #    ldp:contains my-storage:Blog-Entry-1 .

  my-storage:Blog-Entry-2 a schema:BlogPosting ;
    schema:title "Blog about my new house that I just bought...!"@en ;
    schema:hasPart my-storage:House-Phibsboro .


  #
  # My View service...
  #
  my-storage:Service-View a solid-ext:Service ;
    rdfs:comment "Service to manage all my views over my Pod, e.g., hierarchical, tag-based, etc."@en ;
    ldp:contains
      my-storage:View-Hierarchy-Files ,
      my-storage:View-Hierarchy-Sensitivity ,
      my-storage:View-Tagged .

  #
  # Hierarchical by folder...
  #
  my-storage:View-Hierarchy-Files a solid-ext:View ;
    rdfs:comment "Legacy Solid hierarchy view - folders and files."@en ;
    ldp:contains
      my-storage:Folder-Public,
      my-storage:Folder-Private ,
      my-storage:Folder-Photo .

  my-storage:Folder-Public a ldp:BasicContainer ;
    ldp:contains
  # my-storage:Photo-Dog-1 ,  # REMOVE FOR NOW - It's contained in 'Folder-Photo' too
      my-storage:Photo-Dog-21 ,
      my-storage:Blog .

  my-storage:Folder-Private a ldp:BasicContainer ;
    ldp:contains
      my-storage:My-Current-Location,
      my-storage:Photo-Heart-Scan .

  my-storage:Folder-Photo a ldp:BasicContainer ;
    ldp:contains
      my-storage:Photo-Dog-1,
      my-storage:Photo-Dog-2,
      my-storage:Folder-Photo-Friend .

  my-storage:Folder-Photo-Friend a ldp:BasicContainer ;
    ldp:contains my-storage:Photo-Graduation-43, my-storage:Photo-Dog-2 .

  my-storage:Photo-Dog-1 a schema:Photo ;
    rdfs:seeAlso my-storage:Pet-Dog-Bobby.
  my-storage:Photo-Dog-2 a schema:Photo ;
    rdfs:seeAlso <https://musicart.xboxlive.com/6/cfa9c6d7-0000-0000-0000-000000000009/504/image.jpg?w=1920&h=1080>.
  my-storage:Photo-Dog-21 a schema:Photo ;
    rdfs:seeAlso my-storage:Pet-Dog-Bobby.
  my-storage:Photo-Graduation-43 a schema:Photo .
  my-storage:Photo-Heart-Scan a schema:Photo .

  my-storage:My-Current-Location a schema:Place ;
    rdfs:comment "At home in Dublin, Ireland."@en ;
    schema:longitude "53.3493° N" ;
    schema:latitude "6.2607° W" ;
    schema:location my-storage:House-Phibsboro .

  #
  # Hierarchical by data-sensitivity...
  #
  my-storage:View-Hierarchy-Sensitivity a solid-ext:View ;
    rdfs:comment "Hierarchy view by sensitivity."@en ;
    ldp:contains
  # my-storage:Folder-Public ,  # REMOVE FOR NOW - Cross-references are initially confusing!
      my-storage:Folder-Secret ,
      my-storage:Folder-Confidential .

  my-storage:Folder-Secret a ldp:BasicContainer ;
    ldp:contains my-storage:My-Current-Location .

  my-storage:Folder-Confidential a ldp:BasicContainer ;
    ldp:contains my-storage:Photo-X-Ray-32 .


  #
  # My Tagged View...
  #
  my-storage:View-Tagged a solid-ext:View ;
    rdfs:comment "Manages references to resources I wish to view by tags I've created."@en ;
    ldp:contains my-storage:tag-bike, my-storage:tag-mortgage, my-storage:tag-I-like .

  my-storage:tag-bike a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being bikes."@en ;
    solid-ext:tagValue "bike"@en ;
    ldp:contains my-storage:Bike-Cannondale-EVO, my-storage:Bike-Felt-Commuter .

  my-storage:tag-mortgage a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being mortgages."@en ;
    solid-ext:tagValue "mortgage"@en ;
    ldp:contains my-storage:House-Phibsboro.

  my-storage:tag-I-like a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being things I like!"@en ;
    solid-ext:tagValue "like"@en ;
    ldp:contains my-storage:Bike-Cannondale-EVO .


  #
  # I still like a Named Graph of '<my-pod>/resource/<path>?meta=http', but that's just for
  # 'Resources' - what about 'normal' RDF Subjects (i.e., nodes) (what about Objects that are IRIs?)?
  #
  # Let's say I POST artbitrary RDF payload to '<my-pod>/ingest':
  <https://www.justinbiebermusic.com/profile/card#me> rdfs:label "Justin Bieber" ;
    ex:loves dbpedia:Mickey_Mouse .
  dbpedia:Michael_Jackson schema:birthDate "1958-08-29" ;
    schema:height "213cm" .

  # That should return a 'Location:' header with information about that POST:
  #   Location: <my-pod>/query?subject=my-storage:event-ingest-999
  my-storage:event-ingest-999 a solid-ext:EventIngestRdf ;
    httph:method "POST" ;
    httph:content-type "application/trig" ;
    schema:startTime "10:32am April 1st 2021" ;
  #    solid-ext:authUser me: ; # This is correct, but clutters up graph initially...
    solid-ext:receivedRawPayload my-storage:blob-store-1 ;
  # How can we link this POST request to the nodes now in our graph that were contained in it's
  # payload...?
    solid-ext:ingestSubject <https://www.justinbiebermusic.com/profile/card#me>,
                              dbpedia:Michael_Jackson .


  #
  # POST /resourceX
  #
  # dbpedia:Michael_Jackson ex:loves dbpedia:Mickey_Mouse .
  #
  # It would seem that the node 'dbpedia:Michael_Jackson' is now orphaned, and that /resourceX is a
  # completely meaningless IRI too - i.e., to handle it at all, we need to force a node into our
  # graph, which is fine too I guess...
  #
  # But also to post a 'ldp:contains' triple to it's 'parent resource'
  #
  # GET /resourceX


  #
  # Access control for my Blog...
  #
  my-storage:Blog acp:accessControl my-storage:acrForBlog .

  # ACR for Blog - friends can read, controllers can read/write/append.
  my-storage:acrForBlog a acp:AccessControlResource ;
    acp:apply my-storage:policyFriendNotNeighbour ;
    acp:access my-storage:myAccountControllerPolicy.

  my-storage:Blog-Entry-1 acp:accessControl [
    a acp:AccessControlResource ;
    acp:apply my-storage:policyFriendsFromCollegeAndSchoolInWork
  ] .

  #
  # Policies.
  #
  my-storage:myAccountControllerPolicy a acp:AccessControlPolicy ;
    acp:allow acp:Read, acp:Write, acp:Append ;
    acp:allOf my-storage:myMatcherTrusted .

  my-storage:policyFriend a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:anyOf my-storage:myMatcherFriendCollege, my-storage:myMatcherFriendWork .

  my-storage:policyFriendsFromCollegeInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf my-storage:myMatcherFriendCollege, my-storage:myMatcherFriendWork .

  my-storage:policyFriendsFromCollegeAndSchoolInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf
      my-storage:myMatcherFriendCollege ,
      my-storage:myMatcherFriendSchool ,
      my-storage:myMatcherFriendWork ;
    acp:noneOf my-storage:myMatcherNeighbour .

  my-storage:policyFriendNotNeighbour a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf my-storage:myMatcherFriendCollege, my-storage:myMatcherFriendWork ;
    acp:noneOf my-storage:myMatcherNeighbour .


  #
  # Matchers (all entries are OR'ed - any one match means the Matcher matches).
  #
  my-storage:myMatcherTrusted a acp:Matcher ;
    acp:agent
      webIdHarry: ,
      webIdIvanna: .

  my-storage:myMatcherNeighbour a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: .


  my-storage:myMatcherFriendCollege a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: ,
      webIdCarol: ,
      webIdGreg: .

  my-storage:myMatcherFriendSchool  a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: .

  my-storage:myMatcherFriendWork a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: ,
      webIdDee: ,
      webIdErik: ,
      webIdFiona: ,
      webIdGreg: .
}

#
# ACP in a separate Named Graph (separation of data and ACP).
#
my-storage-ACP: {
  my-storage:Blog acp:accessControl my-storage:acrForBlog .

  # ACR for Blog - friends can read, controllers can read/write/append.
  my-storage:acrForBlog a acp:AccessControlResource ;
    acp:apply my-storage:policyFriendNotNeighbour ;
    acp:access my-storage:myAccountControllerPolicy.
}
