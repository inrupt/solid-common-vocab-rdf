PREFIX webIdBob:   <https://bob-provider.com/profile/card#me>

PREFIX bob-profile: <https://bob.example.com/profile/card>
PREFIX bob-storage: <https://bob.best-pod-provider.com/storage/>
PREFIX bob-storage-ACP: <https://bob.best-pod-provider.com/storage/?meta=ACP>


PREFIX webIdAlice: <https://alice-provider.com/profile/card#me>
PREFIX webIdCarol: <https://carol-provider.com/profile/card#me>
PREFIX webIdDee:   <https://dee-provider.com/profile/card#me>
PREFIX webIdErik:  <https://erik-provider.com/profile/card#me>
PREFIX webIdFiona: <https://fiona-provider.com/profile/card#me>
PREFIX webIdGreg:  <https://greg-provider.com/profile/card#me>
PREFIX webIdHarry:  <https://harry-provider.com/profile/card#me>
PREFIX webIdIvanna: <https://ivanna-provider.com/profile/card#me>

PREFIX rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:       <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd:        <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf:       <http://xmlns.com/foaf/0.1/>
PREFIX vcard:      <http://www.w3.org/2006/vcard/ns#>
PREFIX ws:         <http://www.w3.org/ns/pim/space#>
PREFIX ldp:        <http://www.w3.org/ns/ldp#>
PREFIX dbpedia:    <http://dbpedia.org/resource/>
PREFIX httph:      <http://www.w3.org/2007/ont/httph#>
PREFIX schema:     <http://schema.org/>
PREFIX odrl:       <http://www.w3.org/ns/odrl/2/>
PREFIX dpv:        <http://www.w3.org/ns/dpv#>
PREFIX gconsent:   <https://w3id.org/GConsent#>

PREFIX solid:      <http://www.w3.org/ns/solid/terms#>
PREFIX solid-ext:  <http://www.w3.org/ns/solid/terms/experimental-or-extension#>
PREFIX acp:        <http://www.w3.org/ns/solid/acp#>

PREFIX ex:         <https://example.com#>

# Just made up this visualization vocab to allow us easily size nodes in GraphDB visualizations!
PREFIX viz:        <https://viz.example.com#>

#
# Create a Named Graph for this entire Pod.
# Inside here we actually define the Agent, and their Profile document.
#
bob-storage: {
  #
  # Describe the Agent using it's WebID as the RDF Subject (e.g., often 'me', as a human being).
  # Points to the Agent's Solid Pod (i.e., back to this Named Graph!).
  #
  webIdBob: a schema:Person, foaf:Person ;
    rdfs:label "Bob"@en ;
    rdfs:comment "Bob is a dog (Pat's pet), an 'agent' from Dublin, and has a Solid Pod!"@en ;
    vcard:fn "Bobby the dog"@en, "Bob Óg an madra"@ga ;
    schema:name "Bobby"@en, "Bob Óg an madra"@ga ;
    foaf:name "Bobby"@en, "Bob Óg an madra"@ga ;
  # solid:account bob-storage: ; # NSS might do it, but we have no need for 2 references to storage!
    ws:storage bob-storage: ;
    solid:oidcIssuer  <https://broker.pod.inrupt.com/> ;
    solid:account  bob-storage: ;    # Or is this really the root, i.e., just up to the domain?
    viz:nodeSize 0.85 .

  #
  # Describe this Pod instance (is this allowed to add meta-data for the Named Graph itself?!)
  #
  bob-storage: a ws:Storage ;
    rdfs:label "Solid Pod"@en ;
    rdfs:comment "A Solid Pod hosted by Inrupt's ESS product."@en ;
    solid-ext:hasServiceManager bob-storage:Service-Manager ;
    viz:nodeSize 0.45 .

  #
  # Describe my profile card - links back to the Agent's WebID, e.g., 'me', as a human being.
  #
  bob-profile: a foaf:PersonalProfileDocument ;
    rdfs:label "Bob's profile document"@en ;
    rdfs:comment "Bob's personal profile document that points to it's 'maker' and 'primary topic'."@en ;
    foaf:maker webIdBob: ;
    foaf:primaryTopic webIdBob: ;
    viz:nodeSize 0.55 .

  #
  # My bikes...
  #
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "500km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .

  bob-storage:Bike-Felt-Commuter a ex:Bicycle ;
    schema:mileageFromOdometer "63,000km" ;
    schema:purchaseDate "2014/01/01" .


  #
  # My pets...
  #
  bob-storage:Pet-Dog-Bobby a ex:Dog ;
    schema:label "Bobby"@en, "Bobik"@sk ;
    schema:comment "Bobby the wonder dog!"@en ;
    ex:breed "Jack Russel"@en .

  #
  # My properties...
  #
  bob-storage:House-Phibsboro a schema:House ;
    rdfs:comment "Lovely end-of-terrace Victorian redbrick overlooking pitch-and-putt coarse."@en ;
    schema:numberOfRooms "8"^^xsd:integer ;
    schema:address "Phibsboro, Dublin 7"@en .


  #
  # My Service Manager.
  #
  bob-storage:Service-Manager a solid-ext:ServiceManager ;
    rdfs:comment "Service manager (e.g., for managing my views, transactions, access control, contacts, etc.)."@en ;
    ldp:contains
      bob-storage:Service-Notification ,
      bob-storage:Service-Consent ,
      bob-storage:Service-Owning ,
      bob-storage:Service-View ,
      bob-storage:Service-Txn .


  #
  # My Notification service...
  #
  bob-storage:Service-Notification a solid-ext:Service ;
    rdfs:comment "Service handling notifications."@en .

  #
  # My Consent service...
  #
  bob-storage:Service-Consent a solid-ext:Service ;
    rdfs:comment "Service handling Consent (granting, revoking, receipts, etc.)."@en .


  #
  # My Owning service...
  #
  bob-storage:Service-Owning a solid-ext:Service ;
    rdfs:comment "Service to manage things I 'own'."@en ;
    ldp:contains
      bob-storage:Bike-Cannondale-EVO ,
      bob-storage:Bike-Felt-Commuter ,
      bob-storage:Pet-Dog ,
      bob-storage:House-Phibsboro .


  #
  # My Transaction service...
  #
  bob-storage:Service-Txn a solid-ext:Service ;
    rdfs:comment "Service to manage transactions in a Pod, e.g., credit card purchases, house purchases, etc."@en ;
    ldp:contains
      bob-storage:Txn-CreditCard-1 ,
      bob-storage:Txn-DebitCard-1 ,
      bob-storage:Txn-CreditCard-2 ,
      bob-storage:Txn-CreditCard-3 .

  bob-storage:Txn-CreditCard-1 a schema:BuyAction ;
    rdfs:comment "Purchased groceries at local market."@en .
  bob-storage:Txn-DebitCard-1 a schema:BuyAction ;
    rdfs:comment "Bought shoes for kids."@en .
  bob-storage:Txn-CreditCard-2 a schema:BuyAction ;
    rdfs:comment "Booked holiday with Ryanair."@en .
  bob-storage:Txn-CreditCard-3 a schema:BuyAction ;
    rdfs:comment "Paid electricity bill."@en .


  #
  # My blog...
  #
  bob-storage:Blog a schema:Blog, solid-ext:Resource;
    rdfs:label "My Blog"@en ;
    ldp:contains
      bob-storage:Blog-Entry-1 ,
      bob-storage:Blog-Entry-2 .

  #
  # A single blog entry - but it's a 'complex' entity, with a 'structure' made up of a 'Header' and
  # 'Footer' and attachments, etc.
  #
  bob-storage:Blog-Entry-1 a schema:BlogPosting ;
    schema:title "How to Cook for Forty Humans"@en ;
    schema:articleBody "Lisa Simpson - 'Truly there were monsters on that ship, and truly we were them.'"@en ;
    schema:messageAttachment <https://simpsonswiki.com/wiki/How_to_Cook_for_Forty_Humans> ;
    schema:hasPart bob-storage:Blog-Entry-1-Structure .
  bob-storage:Blog-Entry-1-Structure
    schema:hasPart bob-storage:Blog-Entry-1-Structure-Header ;
    schema:hasPart bob-storage:Blog-Entry-1-Structure-Footer .
  bob-storage:Blog-Entry-1-Structure-Header rdfs:comment "Arbitrary header contents..."@en .
  bob-storage:Blog-Entry-1-Structure-Footer
    rdfs:comment "My footer actually has a bike as part of it..."@en ;
    schema:hasPart bob-storage:Bike-Cannondale-EVO .
  # Loops are totally fine, SPARQL property paths will not infinitely recurse!
  #    schema:hasPart bob-storage:Blog-Entry-1 ;
  #    ldp:contains bob-storage:Blog-Entry-1 .

  bob-storage:Blog-Entry-2 a schema:BlogPosting ;
    schema:title "Blog about my new house that I just bought...!"@en ;
    schema:hasPart bob-storage:House-Phibsboro .


  #
  # My View service...
  #
  bob-storage:Service-View a solid-ext:Service ;
    rdfs:comment "Service to manage all my views over my Pod, e.g., hierarchical, tag-based, etc."@en ;
    ldp:contains
      bob-storage:View-Hierarchy-Files ,
      bob-storage:View-Hierarchy-Sensitivity ,
      bob-storage:View-Tagged .

  #
  # Hierarchical by folder...
  #
  bob-storage:View-Hierarchy-Files a solid-ext:View ;
    rdfs:comment "Legacy Solid hierarchy view - folders and files."@en ;
    ldp:contains
      bob-storage:Folder-Public,
      bob-storage:Folder-Private ,
      bob-storage:Folder-Photo .

  bob-storage:Folder-Public a ldp:BasicContainer ;
    ldp:contains
  # bob-storage:Photo-Dog-1 ,  # REMOVE FOR NOW - It's contained in 'Folder-Photo' too
      bob-storage:Photo-Dog-21 ,
      bob-storage:Blog .

  bob-storage:Folder-Private a ldp:BasicContainer ;
    ldp:contains
      bob-storage:My-Current-Location,
      bob-storage:Photo-Heart-Scan .

  bob-storage:Folder-Photo a ldp:BasicContainer ;
    ldp:contains
      bob-storage:Photo-Dog-1,
      bob-storage:Photo-Dog-2,
      bob-storage:Folder-Photo-Friend .

  bob-storage:Folder-Photo-Friend a ldp:BasicContainer ;
    ldp:contains bob-storage:Photo-Graduation-43, bob-storage:Photo-Dog-2 .

  bob-storage:Photo-Dog-1 a schema:Photo ;
    rdfs:seeAlso bob-storage:Pet-Dog-Bobby.
  bob-storage:Photo-Dog-2 a schema:Photo ;
    rdfs:seeAlso <https://musicart.xboxlive.com/6/cfa9c6d7-0000-0000-0000-000000000009/504/image.jpg?w=1920&h=1080>.
  bob-storage:Photo-Dog-21 a schema:Photo ;
    rdfs:seeAlso bob-storage:Pet-Dog-Bobby.
  bob-storage:Photo-Graduation-43 a schema:Photo .
  bob-storage:Photo-Heart-Scan a schema:Photo .

  bob-storage:My-Current-Location a schema:Place ;
    rdfs:comment "At home in Dublin, Ireland."@en ;
    schema:longitude "53.3493° N" ;
    schema:latitude "6.2607° W" ;
    schema:location bob-storage:House-Phibsboro .

  #
  # Hierarchical by data-sensitivity...
  #
  bob-storage:View-Hierarchy-Sensitivity a solid-ext:View ;
    rdfs:comment "Hierarchy view by sensitivity."@en ;
    ldp:contains
  # bob-storage:Folder-Public ,  # REMOVE FOR NOW - Cross-references are initially confusing!
      bob-storage:Folder-Secret ,
      bob-storage:Folder-Confidential .

  bob-storage:Folder-Secret a ldp:BasicContainer ;
    ldp:contains bob-storage:My-Current-Location .

  bob-storage:Folder-Confidential a ldp:BasicContainer ;
    ldp:contains bob-storage:Photo-X-Ray-32 .


  #
  # My Tagged View...
  #
  bob-storage:View-Tagged a solid-ext:View ;
    rdfs:comment "Manages references to resources I wish to view by tags I've created."@en ;
    ldp:contains bob-storage:tag-bike, bob-storage:tag-mortgage, bob-storage:tag-I-like .

  bob-storage:tag-bike a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being bikes."@en ;
    solid-ext:tagValue "bike"@en ;
    ldp:contains bob-storage:Bike-Cannondale-EVO, bob-storage:Bike-Felt-Commuter .

  bob-storage:tag-mortgage a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being mortgages."@en ;
    solid-ext:tagValue "mortgage"@en ;
    ldp:contains bob-storage:House-Phibsboro.

  bob-storage:tag-I-like a solid-ext:Tag, ldp:BasicContainer ;
    rdfs:comment "Resources I've tagged as being things I like!"@en ;
    solid-ext:tagValue "like"@en ;
    ldp:contains bob-storage:Bike-Cannondale-EVO .


  #
  # I still like a Named Graph of '<my-pod>/resource/<path>?meta=http', but that's just for
  # 'Resources' - what about 'normal' RDF Subjects (i.e., nodes) (what about Objects that are IRIs?)?
  #
  # Let's say I POST artbitrary RDF payload to '<my-pod>/ingest':
  <https://www.justinbiebermusic.com/profile/card#me> rdfs:label "Justin Bieber" ;
    ex:loves dbpedia:Mickey_Mouse .
  dbpedia:Michael_Jackson schema:birthDate "1958-08-29" ;
    schema:height "213cm" .

  # That should return a 'Location:' header with information about that POST:
  #   Location: <my-pod>/query?subject=bob-storage:event-ingest-999
  bob-storage:event-ingest-999 a solid-ext:EventIngestRdf ;
    httph:method "POST" ;
    httph:content-type "application/trig" ;
    schema:startTime "10:32am April 1st 2021" ;
  #    solid-ext:authUser webIdBob: ; # This is correct, but clutters up graph initially...
    solid-ext:receivedRawPayload bob-storage:blob-store-1 ;
  # How can we link this POST request to the nodes now in our graph that were contained in it's
  # payload...?
    solid-ext:ingestSubject <https://www.justinbiebermusic.com/profile/card#me>,
                              dbpedia:Michael_Jackson .


  #
  # POST /resourceX
  #
  # dbpedia:Michael_Jackson ex:loves dbpedia:Mickey_Mouse .
  #
  # It would seem that the node 'dbpedia:Michael_Jackson' is now orphaned, and that /resourceX is a
  # completely meaningless IRI too - i.e., to handle it at all, we need to force a node into our
  # graph, which is fine too I guess...
  #
  # But also to post a 'ldp:contains' triple to it's 'parent resource'
  #
  # GET /resourceX


  #
  # Access control for my Blog...
  #
  bob-storage:Blog acp:accessControl bob-storage:acrForBlog .
  bob-storage:acrForBlog acp:hasAccessControl bob-storage:Blog . # Made up - just to point from ACR back to Node it protects.

  # ACR for Blog - friends can read, controllers can read/write/append.
  bob-storage:acrForBlog a acp:AccessControlResource ;
    acp:apply bob-storage:policyFriendNotNeighbour ;
    acp:access bob-storage:myAccountControllerPolicy.

  bob-storage:Blog-Entry-1 acp:accessControl [
    a acp:AccessControlResource ;
    acp:hasAccessControl bob-storage:Blog-Entry-1 ;  # Made up - just to point from ACR back to Node it protects.
    acp:apply bob-storage:policyFriendsFromCollegeAndSchoolInWork
  ] .

  #
  # Policies.
  #
  bob-storage:myAccountControllerPolicy a acp:AccessControlPolicy ;
    acp:allow acp:Read, acp:Write, acp:Append ;
    acp:allOf bob-storage:myMatcherTrusted .

  bob-storage:policyFriend a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:anyOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .

  bob-storage:policyFriendsFromCollegeInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .

  bob-storage:policyFriendsFromCollegeAndSchoolInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf
      bob-storage:myMatcherFriendCollege ,
      bob-storage:myMatcherFriendSchool ,
      bob-storage:myMatcherFriendWork ;
    acp:noneOf bob-storage:myMatcherNeighbour .

  bob-storage:policyFriendNotNeighbour a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork ;
    acp:noneOf bob-storage:myMatcherNeighbour .


  #
  # Matchers (all entries are OR'ed - any one match means the Matcher matches).
  #
  bob-storage:myMatcherTrusted a acp:Matcher ;
    acp:agent
      webIdHarry: ,
      webIdIvanna: .

  bob-storage:myMatcherNeighbour a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: .


  bob-storage:myMatcherFriendCollege a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: ,
      webIdCarol: ,
      webIdGreg: .

  bob-storage:myMatcherFriendSchool  a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: .

  bob-storage:myMatcherFriendWork a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: ,
      webIdDee: ,
      webIdErik: ,
      webIdFiona: ,
      webIdGreg: .
}

#
# ACP in a separate Named Graph (separation of data and ACP).
#
bob-storage-ACP: {
  bob-storage:Blog acp:accessControl bob-storage:acrForBlog .
  bob-storage:acrForBlog acp:hasAccessControl bob-storage:Blog . # Made up - just to point from ACR back to Node it protects.

  # ACR for Blog - friends can read, controllers can read/write/append.
  bob-storage:acrForBlog a acp:AccessControlResource ;
    acp:apply bob-storage:policyFriendNotNeighbour ;
    acp:access bob-storage:myAccountControllerPolicy.
}


#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/
#   Slug: EVO
#   Content-Type: application/trig
#
# POSTing quads **REQUIRES** the URL and the Named Graph to match (query params can differ)
PREFIX bob-storage: <https://bob.best-pod-provider.com/storage/>

bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}


#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/
#   Slug: EVO
#   Content-Type: application/trig
#
# POSTing quads **REQUIRES** all Named Graph IRIs to *start with* the URL,
# Unless the URL itself has query params
PREFIX pat-storage: <https://pat.best-pod-provider.com/storage/>
PREFIX bob-storage: <https://bob.best-pod-provider.com/storage/>

pat-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/06/06" ;
    schema:size "61cm" .
}
bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}





#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/?ext=ACP
#   Content-Type: application/trig
#
# POSTing to a query param URL means "POSTing Meta-Data for the 'Solid Resource' without the Query
#   Param". Therefore, it's payload MUST either be:
#    - Be triples only.
#    - Be a SINGLE Named Graph with an IRI of the full URL.
#   Apart from these conditions, the payload may contain any triples at all.

PREFIX pat-storage: <https://pat.best-pod-provider.com/storage/>
PREFIX bob-storage: <https://bob.best-pod-provider.com/storage/>

<https://bob.best-pod-provider.com/storage/public/ThingsIOwn/?ext=ACP> {
  bob-storage-ACP:acrForBike-Cannondale-EVO a acp:AccessControlResource ;
    acp:apply bob-storage-ACP:policyFriendNotNeighbour ;

  bob-storage-ACP:policyFriendNotNeighbour a acp:AccessControlPolicy ;
    acp:allow acp:Write ;
    acp:allOf my-storage:myMatcherFriendCollege, my-storage:myMatcherFriendWork .
}




#
# Tim has suggested that hte Named Graph be the 'location' of the resource:
#
<https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}

#
# I say:
# - The Named Graph is the Pod owner's Storage.
# - The 'resource' parent (there must be one) 'ldp:contains' the new 'Resource'.
# - This POST results in a new 'Solid Resource' node in that Named Graph,
#   with the node IRI being the full URL.
# - This node 'solid:containsSubject' all the RDF Subjects in the payload.
# - The payload triples are simply added to the Named Graph
bob-storage: {
  # Server need to mint a new IRI for this 'Solid Resource', and it references all the RDF subjects
  # that exist in the input payload via the 'solid:containsSubject' predicate.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> a solid:Resource ;
    solid:containsSubject bob-storage:Bike-Cannondale-EVO .

  # Parent LDP Container must LDP contain this newly created resource.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/> ldp:contains
    <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> .

  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}
#
# ...or data in two Named Graphs (one just for the RESOURCE VIEW)...
#
<https://bob.best-pod-provider.com/storage/?ext=RESOURCE-VIEW> {
  # Server need to mint a new IRI for this 'Solid Resource', and it references all the RDF subjects
  # that exist in the input payload via the 'solid:containsSubject' predicate.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> a solid:Resource ;
    solid:containsSubject bob-storage:Bike-Cannondale-EVO .

  # Parent LDP Container must LDP contain this newly created resource.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/> ldp:contains
    <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> .
}
bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}


#
# Doing a GET on the resource <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO>
# strips the server-created triples (can they be in a Server-managed Named Graph!??), and just
# returns all the referenced 'solid:containsSubject' and their immediate predicates/objects.
bob-storage: {  # If a quad serialization was asked for in the 'Accept:' header.
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
  schema:mileageFromOdometer "776km" ;
  schema:purchaseDate "2021/01/01" ;
  schema:size "54cm" .
}



#
# Try adding a resource to my Pod that contains subject for the URL, and another subject at another
# URL.
#
# POST /public/blog/
#  Slug: entry-1

</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en ;
  rdfs:seeAlso </private/thingsIOwn/bike/EVO#it> ;
  rdfs:seeAlso <public/photos/2021/06/01/evo-on-sally-gap.jpeg> .

</private/thingsIOwn/bike/EVO#it> a ex:Bicycle ;
  rdfs:comment "Cannondale SuperSix EVO Hi-Mod" ;
  schema:size "54cm" .

</private/thingsIOwn/bike/EVO> a foaf:PersonalProfileDocument ;
  rdfs:label "Description of Bob's EVO"@en ;
  rdfs:comment "Description of Bob's bike, a bike made for the mountains!"@en ;
  foaf:maker webIdBob: ;
  foaf:primaryTopic </private/thingsIOwn/bike/EVO#it> ;
  viz:nodeSize 0.55 .

<public/photos/2021/06/01/evo-on-sally-gap.jpeg> a schema:Image ;
  ex:binaryFile <https://pod.inrupt.com/binary/resource/image-GUID> ;
  ex:gpsLat "20.423" ;
  ex:gpsLong "20.423" ;
  ex:apeture "??" .

# GET /public/blog/entry-1
# ...ALL OF THE ABOVE (plus LDP triples for 'ldp:RDFSource')

# GET /private/thingsIOwn/bikes/EVO
# NOTHING - our resource store has never seen this URL.


#
# Article made up of header, introduction, body, and footer
# Profile document has the doc, and the non-information resource in it (i.e., #me)Purchase and line items
# Consent with purpose
# Calendar - events, party, time, place, people, present, cake
#


</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en ;
  ex:hasIntro </public/blog/entry-1-intro> ;
  ex:hasBody </public/blog/entry-1-body> ;
  rdfs:seeAlso <public/photos/2021/06/01/evo-on-sally-gap.jpeg> .

</public/blog/entry-1-intro> a ex:Intro ;
  rdfs:comment "Review of race-quality bikes - the awesome Cannondale SuperSix EVO Hi-Mod" ;
  rdfs:seeAlso </public/blog/entry-1-component-list> .

</public/blog/entry-1-body> a ex:Body ;
  rdfs:label "Description of Bob's EVO"@en ;
  rdfs:comment "Description of Bob's bike, a bike made for the mountains!"@en ;
  foaf:maker webIdBob: ;
  foaf:primaryTopic </private/thingsIOwn/bike/EVO#it> ;
  viz:nodeSize 0.55 .

</public/blog/entry-1-component-list>
  shimano:duraAcePedals ,
  shimano:duraAceRimBrakes ,
  mavic:ksyriumProWheels .

# So what does it mean for the triplestore if we DELETE this resource?


# What if I POST this Solid Resource to /private/secret/blog, what gets written to the triplestore?
</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .

# What if I POST this Solid Resource to /public/blog, what gets written to the triplestore?
</public/blog/entry-1> a schema:Article ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .

# Now what if I DELETE /private/secret/blog - what happens in the triplestore?




# What if I POST this Solid Resource to /private/secret/blog, what gets written to the triplestore?
</private/secret/blog> a solid:Resource ;
  schema:timeCreated "2021/06/17" ;
  solid:createdBy webIdBob: ;
  solid:hasSubject /public/blog/entry-1 .
</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .


# What if I POST this Solid Resource to /public/blog, what gets written to the triplestore?
</public/blog> a solid:Resource ;
  schema:timeCreated "2021/06/17" ;
  solid:createdBy webIdAlice: ;
  solid:hasSubject /public/blog/entry-1 .
</public/blog/entry-1> a schema:Article ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .




# What does PATCH mean for the Resource-centric store?
# Must you read the current resource, parse it, apply the PATCH and then overwrite in the store?



# What does it mean if the URL is not a Subject in the payload?

# Case A: the URL and payload has URL-as-Subject.
# Case B: the URL has payload with no URL-as-Subject.

# Case C: the URL and payload has URL-as-Subject.

# Add resource, then add another resource containing an overlapping Subject, but then get the
# original Resource - does it contain the new triples for the overlapping Subject?

# My thinking is that DELETE does not remove any Subjects from the Pod at all, just the Resource
# itself!No, that can't be true - intuitively if I add a Resource, the triples go into my Pod, and
# so DELETEing the Resource should remove the original triples from my Pod. But should it just
# remove the Subjects (and all triples)? Yes!
# But what if another Resource also added an overlaping Subject (reference counting that Emmet
# referred to!).

# Resource A - contains Subjects X, Y, and Z.
# Resource B - contains Subjects X and Y.
# Resource C - contains Subject Z.

# What does DELETE Resource B mean?


# POST https://pod.inrupt.com/bob/resourceA
# PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/resourceA> {
#   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .
# }

# POST https://pod.inrupt.com/bob/resourceB
# PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/resourceB> {
#   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Sujet numéro un"@fr .
# }


# What does GET /resourceA return?

# PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .

# ...or...

# PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en , "Sujet numéro un"@fr .



# What do I get back if I query my Pod for <https://pod.inrupt.com/bob/public/subject1> ?
# SELECT * WHERE { <https://pod.inrupt.com/bob/public/subject1> ?p ?o }



# Seems like Resource POST/PUT requests can't contain quads (since a Solid Resourced needs to go
# into it's own Named Graph if it's to be retrievable as a 'unit').


#
# Server needs to copy Resources triples into two Named Graphs, one for the Resource itself, and
# the other a Named Graph to represent the entire Pod.
#

 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
 PREFIX acp:        <http://www.w3.org/ns/solid/acp#>
 PREFIX bob-storage: <https://bob.best-pod-provider.com/storage/>

 <https://pod.inrupt.com/bob/resourceA> {
   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .
 }
 <https://pod.inrupt.com/bob/PodData> {
   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .
 }
 <https://pod.inrupt.com/bob/resourceA?ext=acp> {
   <https://pod.inrupt.com/bob/resourceA> acp:accessControl <https://pod.inrupt.com/bob/resourceA?ext=acr> .
   <https://pod.inrupt.com/bob/resourceA?ext=acr> acp:apply <https://pod.inrupt.com/bob/resourceA?ext=policy-GUID-1> .
   <https://pod.inrupt.com/bob/resourceA?ext=policy-GUID-1>
     acp:allow acp:Read, acp:Write, acp:Append ;
     acp:anyOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .
 }


 <https://pod.inrupt.com/bob/resourceB> {
   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Sujet numéro un"@fr .
 }
 <https://pod.inrupt.com/bob/PodData> {
   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Sujet numéro un"@fr .
 }
 <https://pod.inrupt.com/bob/resourceB?ext=acp> {
   <https://pod.inrupt.com/bob/resourceB> acp:accessControl <https://pod.inrupt.com/bob/resourceB?ext=acr> .
   <https://pod.inrupt.com/bob/resourceB?ext=acr> acp:apply bob-storage:policyFriendNotNeighbour .
 }
