#
# This file represents instance data, and is not intended for vocab terms.
# The purpose is simply to play around with the notions of data in a Pod, and
# for testing ACL or ACP patterns, or notifications, or multiple
# Pods-per-WebID, etc.
#
prefix dcterms: <http://purl.org/dc/terms/>
prefix http: <http://www.w3.org/2011/http#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix webIdBob:   <https://bob-provider.com/profile/card#me>

prefix bob-profile: <https://bob.example.com/profile/card>
prefix bob-storage: <https://bob.best-pod-provider.com/storage/>
prefix bob-storage-ACP: <https://bob.best-pod-provider.com/storage/?meta=ACP>


prefix webIdAlice: <https://alice-provider.com/profile/card#me>
prefix webIdCarol: <https://carol-provider.com/profile/card#me>
prefix webIdDee:   <https://dee-provider.com/profile/card#me>
prefix webIdErik:  <https://erik-provider.com/profile/card#me>
prefix webIdFiona: <https://fiona-provider.com/profile/card#me>
prefix webIdGreg:  <https://greg-provider.com/profile/card#me>
prefix webIdHarry:  <https://harry-provider.com/profile/card#me>
prefix webIdIvanna: <https://ivanna-provider.com/profile/card#me>

prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd:        <http://www.w3.org/2001/XMLSchema#>
prefix foaf:       <http://xmlns.com/foaf/0.1/>
prefix vcard:      <http://www.w3.org/2006/vcard/ns#>
prefix ws:         <http://www.w3.org/ns/pim/space#>
prefix ldp:        <http://www.w3.org/ns/ldp#>
prefix dbpedia:    <http://dbpedia.org/resource/>
prefix httph:      <https://www.w3.org/2007/ont/httph#>
prefix schema:     <http://schema.org/>
prefix odrl:       <http://www.w3.org/ns/odrl/2/>
prefix dpv:        <http://www.w3.org/ns/dpv#>
prefix gconsent:   <https://w3id.org/GConsent#>

prefix solid:      <http://www.w3.org/ns/solid/terms#>
prefix solid-ext:  <http://www.w3.org/ns/solid/terms/experimental-or-extension#>
prefix acp:        <http://www.w3.org/ns/solid/acp#>

prefix ex:         <https://example.com#>

# Just made up this visualization vocab to allow us easily size nodes in GraphDB visualizations!
prefix viz:        <https://viz.example.com#>

#
# Create a Named Graph for this entire Pod.
# Inside here we actually define the Agent, and their Profile document.
#
bob-storage: {
  #
  # Describe the Agent using it's WebID as the RDF Subject (e.g., often 'me', as a human being).
  # Points to the Agent's Solid Pod (i.e., back to this Named Graph!).
  #
  webIdBob: a schema:Person, foaf:Person, <https://www.w3.org/ns/person#Person> ;
    rdfs:label "Bob"@en ;
    <https://www.w3.org/ns/person#birthName> "Born as Robert"@en ;

    rdfs:comment "Bob is a dog, an 'agent' from Ireland, and has his own Solid Pod!"@en ;
    vcard:fn "Bobby the dog"@en, "Bob Óg an madra"@ga ;
    schema:name "Bobby the dog"@en, "Bob Óg an madra"@ga ;
    foaf:name "Bobby the dog"@en, "Bob Óg an madra"@ga ;
  # solid:account bob-storage: ; # NSS might do it, but we have no need for 2 references to storage!
    ws:storage bob-storage: ;
    solid:oidcIssuer  <https://broker.pod.inrupt.com/> ;
    solid:account  bob-storage: ;    # Or is this really the root, i.e., just up to the domain?
    viz:nodeSize 0.85 .



  #
  # Describe this Pod instance (is this allowed to add meta-data for the Named Graph itself?!)
  #
  bob-storage: a ws:Storage ;
    rdfs:label "Solid Pod"@en ;
    rdfs:comment "A Solid Pod hosted by Inrupt's ESS product."@en ;
    solid-ext:hasServiceManager bob-storage:Service-Manager ;
    viz:nodeSize 0.45 ;
    ldp:contains
      bob-storage:My-Current-Location ,
      bob-storage:House-Phibsboro ,
      bob-storage:House-Slovakia .


  bob-storage:My-Current-Location a schema:Place ;
    rdfs:comment "At home in Dublin, Ireland."@en ;
    schema:longitude "53.3493° N" ;
    schema:latitude "6.2607° W" ;
    schema:location bob-storage:House-Phibsboro .

  #
  # Bob's homes or houses (e.g., vacation home, rental properties, etc.)...
  #
  bob-storage:House-Phibsboro a schema:House ;
    rdfs:comment "Lovely end-of-terrace Victorian redbrick overlooking pitch-and-putt coarse."@en ;
    schema:numberOfRooms "8"^^xsd:integer ;
    schema:streetAddress "Phibsboro, Dublin 7"@en ;
    <https://data.ireland.gov/ns/eircode> "D07 R111".


  bob-storage:AddressOfHouseInPhibsboro a <http://www.w3.org/ns/locn#Address> ;


  bob-storage:House-Slovakia a schema:House ;
    rdfs:comment "Holiday cottage outside Hlohovec."@en ;
    schema:numberOfRooms "4"^^xsd:integer ;
    schema:streetAddress "1 Main Street"@en ;
    schema:addressCountry "Slovakia"@en, "Slovak Republic"@sk ;
    <https://data.slovakia.gov/ns/propertyTaxCode> "Tax-prop-1111".




  #
  # Describe my profile card - links back to the Agent's WebID, e.g., 'me', as a human being.
  #
  bob-profile: a foaf:PersonalProfileDocument ;
    rdfs:label "Bob's profile document"@en ;
    rdfs:comment "Bob's personal profile document that points to it's 'maker' and 'primary topic'."@en ;
    foaf:maker webIdBob: ;
    foaf:primaryTopic webIdBob: ;
    viz:nodeSize 0.55 .

  #
  # Policies.
  #
  bob-storage:myAccountControllerPolicy a acp:AccessControlPolicy ;
    acp:allow acp:Read, acp:Write, acp:Append ;
    acp:allOf bob-storage:myMatcherTrusted .

  bob-storage:policyFriend a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:anyOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .

  bob-storage:policyFriendsFromCollegeInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .

  bob-storage:policyFriendsFromCollegeAndSchoolInWork a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf
      bob-storage:myMatcherFriendCollege ,
      bob-storage:myMatcherFriendSchool ,
      bob-storage:myMatcherFriendWork ;
    acp:noneOf bob-storage:myMatcherNeighbour .

  bob-storage:policyFriendNotNeighbour a acp:AccessControlPolicy ;
    acp:allow acp:Read ;
    acp:allOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork ;
    acp:noneOf bob-storage:myMatcherNeighbour .


  #
  # Matchers (all entries are OR'ed - any one match means the Matcher matches).
  #
  bob-storage:myMatcherTrusted a acp:Matcher ;
    acp:agent
      webIdHarry: ,
      webIdIvanna: .

  bob-storage:myMatcherNeighbour a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: .


  bob-storage:myMatcherFriendCollege a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdBob: ,
      webIdCarol: ,
      webIdGreg: .

  bob-storage:myMatcherFriendSchool  a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: .

  bob-storage:myMatcherFriendWork a acp:Matcher ;
    acp:agent
      webIdAlice: ,
      webIdCarol: ,
      webIdDee: ,
      webIdErik: ,
      webIdFiona: ,
      webIdGreg: .
}

#
# ACP in a separate Named Graph (separation of data and ACP).
#
bob-storage-ACP: {
  bob-storage:Blog acp:accessControl bob-storage:acrForBlog .
  bob-storage:acrForBlog acp:hasAccessControl bob-storage:Blog . # Made up - just to point from ACR back to Node it protects.

  # ACR for Blog - friends can read, controllers can read/write/append.
  bob-storage:acrForBlog a acp:AccessControlResource ;
    acp:apply bob-storage:policyFriendNotNeighbour ;
    acp:access bob-storage:myAccountControllerPolicy.
}


#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/
#   Slug: EVO
#   Content-Type: application/trig
#
# POSTing quads **REQUIRES** the URL and the Named Graph to match (query params can differ)
prefix bob-storage: <https://bob.best-pod-provider.com/storage/>

bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}


#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/
#   Slug: EVO
#   Content-Type: application/trig
#
# POSTing quads **REQUIRES** all Named Graph IRIs to *start with* the URL,
# Unless the URL itself has query params
prefix pat-storage: <https://pat.best-pod-provider.com/storage/>
prefix bob-storage: <https://bob.best-pod-provider.com/storage/>

pat-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/06/06" ;
    schema:size "61cm" .
}
bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}





#
# POST Resource https://bob.best-pod-provider.com/storage/public/ThingsIOwn/?ext=ACP
#   Content-Type: application/trig
#
# POSTing to a query param URL means "POSTing Meta-Data for the 'Solid Resource' without the Query
#   Param". Therefore, it's payload MUST either be:
#    - Be triples only.
#    - Be a SINGLE Named Graph with an IRI of the full URL.
#   Apart from these conditions, the payload may contain any triples at all.

prefix pat-storage: <https://pat.best-pod-provider.com/storage/>
prefix bob-storage: <https://bob.best-pod-provider.com/storage/>

<https://bob.best-pod-provider.com/storage/public/ThingsIOwn/?ext=ACP> {
  bob-storage-ACP:acrForBike-Cannondale-EVO a acp:AccessControlResource ;
    acp:apply bob-storage-ACP:policyFriendNotNeighbour .

  bob-storage-ACP:policyFriendNotNeighbour a acp:AccessControlPolicy ;
    acp:allow acp:Write ;
    acp:allOf bob-storage:myMatcherFriendCollege, bob-storage:myMatcherFriendWork .
}




#
# Tim has suggested that the Named Graph be the 'location' of the resource:
#
<https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}
#
# I say:
# - The Named Graph is the Pod owner's Storage.
# - The 'resource' parent (there must be one) 'ldp:contains' the new 'Resource'.
# - This POST results in a new 'Solid Resource' node in that Named Graph,
#   with the node IRI being the full URL.
# - This node 'solid:containsSubject' all the RDF Subjects in the payload.
# - The payload triples are simply added to the Named Graph.
bob-storage: {
  # Server needs to mint a new IRI for this 'Solid Resource', and it references all the RDF subjects
  # that exist in the input payload via the 'solid:containsSubject' predicate.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> a solid:Resource ;
    solid:containsSubject bob-storage:Bike-Cannondale-EVO .

  # Parent LDP Container must LDP contain this newly created resource.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/> ldp:contains
    <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> .

  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}
#
# ...or data in two Named Graphs (one just for the RESOURCE VIEW)...
#
<https://bob.best-pod-provider.com/storage/?ext=RESOURCE-VIEW> {
  # Server need to mint a new IRI for this 'Solid Resource', and it references all the RDF subjects
  # that exist in the input payload via the 'solid:containsSubject' predicate.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> a solid:Resource ;
    solid:containsSubject bob-storage:Bike-Cannondale-EVO .

  # Parent LDP Container must LDP contain this newly created resource.
  <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/> ldp:contains
    <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO> .
}
bob-storage: {
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
    schema:mileageFromOdometer "776km" ;
    schema:purchaseDate "2021/01/01" ;
    schema:size "54cm" .
}


#
# Doing a GET on the resource <https://bob.best-pod-provider.com/storage/public/ThingsIOwn/EVO>
# strips the server-created triples (can they be in a Server-managed Named Graph!??), and just
# returns all the referenced 'solid:containsSubject' and their immediate predicates/objects.
bob-storage: {  # If a quad serialization was asked for in the 'Accept:' header.
  bob-storage:Bike-Cannondale-EVO a ex:Bicycle ;
  schema:mileageFromOdometer "776km" ;
  schema:purchaseDate "2021/01/01" ;
  schema:size "54cm" .
}



#
# Try adding a resource to my Pod that contains subject for the URL, and another subject at another
# URL.
#
# POST /public/blog/
#  Slug: entry-1

</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en ;
  rdfs:seeAlso </private/thingsIOwn/bike/EVO#it> ;
  rdfs:seeAlso <public/photos/2021/06/01/evo-on-sally-gap.jpeg> .

</private/thingsIOwn/bike/EVO#it> a ex:Bicycle ;
  rdfs:comment "Cannondale SuperSix EVO Hi-Mod" ;
  schema:size "54cm" .

</private/thingsIOwn/bike/EVO> a foaf:PersonalProfileDocument ;
  rdfs:label "Description of Bob's EVO"@en ;
  rdfs:comment "Description of Bob's bike, a bike made for the mountains!"@en ;
  foaf:maker webIdBob: ;
  foaf:primaryTopic </private/thingsIOwn/bike/EVO#it> ;
  viz:nodeSize 0.55 .

<public/photos/2021/06/01/evo-on-sally-gap.jpeg> a schema:Image ;
  ex:binaryFile <https://pod.inrupt.com/binary/resource/image-GUID> ;
  ex:gpsLat "20.423" ;
  ex:gpsLong "20.423" ;
  ex:apeture "??" .

# GET /public/blog/entry-1
# ...ALL OF THE ABOVE (plus LDP triples for 'ldp:RDFSource')

# GET /private/thingsIOwn/bikes/EVO
# NOTHING - our resource store has never seen this URL.


#
# Examples of multi-part Solid Resources:
# ---------------------------------------
# Article made up of header, introduction, body, and footer
# Profile document has the doc, and the non-information resource in it (i.e., #me)
# Purchase and line items
# Consent with purpose
# Calendar - events, party, time, place, people, present, cake
#
</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en ;
  ex:hasIntro </public/blog/entry-1-intro> ;
  ex:hasBody </public/blog/entry-1-body> ;
  rdfs:seeAlso <public/photos/2021/06/01/evo-on-sally-gap.jpeg> .

</public/blog/entry-1-intro> a ex:Intro ;
  rdfs:comment "Review of race-quality bikes - the awesome Cannondale SuperSix EVO Hi-Mod" ;
  rdfs:seeAlso </public/blog/entry-1-component-list> .

</public/blog/entry-1-body> a ex:Body ;
  rdfs:label "Description of Bob's EVO"@en ;
  rdfs:comment "Description of Bob's bike, a bike made for the mountains!"@en ;
  foaf:maker webIdBob: ;
  foaf:primaryTopic </private/thingsIOwn/bike/EVO#it> ;
  viz:nodeSize 0.55 .

</public/blog/entry-1-component-list>
  ldp:contains
    ex:shimanoDuraAcePedals ,
    ex:shimanoDuraAceRimBrakes ,
    ex:mavicJsyriumProWheels .


# What if I POST this Solid Resource to /private/secret/blog, what gets written to the triplestore?
</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .

# What if I POST this Solid Resource to /public/blog, what gets written to the triplestore?
</public/blog/entry-1> a schema:Article ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .

# Now what if I DELETE /private/secret/blog - what happens in the triplestore?




# What if I POST this Solid Resource to /private/secret/blog, what gets written to the triplestore?
</private/secret/blog> a solid:Resource ;
  schema:timeCreated "2021/06/17" ;
  solid:createdBy webIdBob: ;
  solid:hasSubject </public/blog/entry-1> .
</public/blog/entry-1> a ex:BlogEntry ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .


# What if I POST this Solid Resource to /public/blog, what gets written to the triplestore?
</public/blog> a solid:Resource ;
  schema:timeCreated "2021/06/17" ;
  solid:createdBy webIdAlice: ;
  solid:hasSubject </public/blog/entry-1> .
</public/blog/entry-1> a schema:Article ;
  schema:title "Me new bike"@en ;
  rdfs:comment "My first blog entry, about my new bike - it's bleedin' deadly!"@en .




# What does PATCH mean for the Resource-centric key-value store?
# Must you read the current resource, parse it, apply the PATCH and then overwrite in the store?



# What does it mean if the URL is not a Subject in the payload?

# Case A: the URL and payload has URL-as-Subject.
# Case B: the URL has payload with no URL-as-Subject.

# Add resource, then add another resource containing an overlapping Subject, but then get the
# original Resource - does it contain the new triples for the overlapping Subject?

# My thinking is that DELETE does not remove any Subjects from the Pod at all, just the Resource
# itself! No, that can't be true - intuitively if I add a Resource, the triples go into my Pod, and
# so DELETEing the Resource should remove the original triples from my Pod. But should it just
# remove the Subjects (and all triples)? Yes!
# But what if another Resource also added an overlaping Subject (reference counting that Emmet
# referred to!).

# Resource A - contains Subjects X, Y, and Z.
# Resource B - contains Subjects X and Y.
# Resource C - contains Subject Z.

# What does DELETE Resource B mean?


# POST https://pod.inrupt.com/bob/resourceA
# prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/resourceA> {
#   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .
# }

# POST https://pod.inrupt.com/bob/resourceB
# prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/resourceB> {
#   <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Sujet numéro un"@fr .
# }


# What does GET /resourceA return?

# prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en .

# ...or...

# prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
# <https://pod.inrupt.com/bob/public/subject1> rdfs:comment "Subject number one"@en , "Sujet numéro un"@fr .
